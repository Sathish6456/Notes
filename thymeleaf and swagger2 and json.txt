Thmeleaf 
Thymleaf 
it is modern server side java template engine 
this is used as view layer of our application
idea of thymleaf is to make our html page dynamic by adding custom tags of thymleaf 
thymleaf allows seemless communication between webdesigner and application developer 
 
1)add the thymeleaf dependancy 
2)we have to create a package 
	package com.zensar.messageApi.controller;
3)in that package we have to create a  class 
	MessageController
@GetMapping("/hi")
	public String hello(Model m) {
		System.out.println("In hello()");
		//What ever we are returning from this method is view
		//This view is in the form of html file 
		//And html view MUST be present in --->src/main/resources/templates/welcome.html
		
		return "welcome";
	}
4)src/main/resources/templates/welcome.html in this we have to write some html content 
 

Swagger 2 

DOCUMENTATATION-
	-WRITE MANUALLY(it is time consuming)
	-Automatically generates this Documentation 
	-Swagger

it is an open source project used to generate rest api documentation 
it also gives you an user interface to access your rest end point via browser 
following are the steps to carried out in order to use swagger in application 
1)Add dependancy in pom.xml
2)Configure swagger
3)Enabling swagger 
4)Adding more annnotations 


Actuator It helps you to monitor and manage
Spring boot actuator gives you number of Builtin end points and lets you add your own end points
Optionally you can enable or disable each individual end points
Steps to use Actuator
1.Add the dependencies in pom.xm
2.optionally,add properties in application.properties file

http:/localhost:8080/actuator
This is a default endpoints given by actuator 
This end points tells you all the end points given by default 
General syntax of end points is as follows 
/actuator/id
id is built-in end point given by actuator 
ex:/actuator/health 
This end point gives us the health information about the application 
Enabling the atcuator end points 
management.endpoint.id.enabled=true
/actuator/beans= This endpoint displys complete list of beans configured in application


--------------------**************************----------------------------------------
JWT
Json Web Token 
	header.payload.signature
	
	header-Algorithm used for token generation 

	payload-additional information while generating the token (username,roles)

	signature-private sensitive String value which validates thin token 
		(This string ONLY on server not shared with client)
		(This string should be very complext so that it can't be guessed)


Json web token

eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.													-header
eyJ1c2Vybm5hbWUiOiJ6ZW5zYXIiLCJleHAiOjE2NDc5MjcyMzJ9.									-payload
MjYNQuGsAitZf4X860pVLJ_1CHLVfttjj8Ewhd0So_lvRidWic9gkAZ14p59_mZXt_DkUzxgXHGrPNiC2VT6nw	-signature

.withExpiresAt(new Date(System.currentTimeMillis() + 10*60*60)) //by using this we can set some time for the web token

we can store our token in Browser SessionStorage by using - SessionStorage.getItem('token')

if we clear the cache of our browser passwords will be cleaned or removed from our Browser 
